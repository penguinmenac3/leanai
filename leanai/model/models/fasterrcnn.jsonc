/*
"out" stores a copy of the output in the respective variable name.
In case of tuple outputs, a list of names must be provided.
When having multiple outputs only the first is passed on.
Others can only be used via storing mechanic.

"in" for layers with multiple inputs this list defines where the inputs come from.
To use the previous layers output use null.
To use stored outputs use the string assigned to that output.

By specifying "args" in a layer definition this layer can have multiple inputs.
However, only the first input will be passed directly, the other inputs will be stored to be usable via the in mechanic.

By using "return" you can specify that a layer does not return what it normaly would return,
but it returns the content of the variables provided as a list. This can be used
for models which have multiple outputs coming from various stages in the model.
*/
{
   "FasterRCNN": {"type": "Sequential", "args": ["image", "extra_proposals", "extra_proposal_indices"], "layers": [
        {"type": "ImageNetModel", "encoder_type": "vgg16_bn", "pretrained": true, "only_encoder": true, "last_layer": 42,
            "in": "image",
            "out": "features"
        },
        {"type": "FasterRCNN_RPN", "image_size": "spec:image_size", "log_deltas": "spec:log_deltas",
            "in": "features",
            "out": ["rpn_anchors", "rpn_deltas", "rpn_class_ids", "rpn_indices", "proposals", "proposal_indices"]
        },
        {"name": "InjectProposals", "type": "Concat", "axis": 0, 
            "in": ["proposals", "extra_proposals"],
            "out": "final_anchors"
        },
        {"name": "InjectProposalIndices", "type": "Concat", "axis": 0,
            "in": ["proposal_indices", "extra_proposal_indices"],
            "out": "final_anchor_indices"
        },
        {"type": "FasterRCNN_Head", "image_size": "spec:image_size", "num_classes": "spec:num_classes", "log_deltas": "spec:log_deltas", "train": "spec:train",
            "in": ["features", "final_anchors", "final_anchor_indices"],
            "out": ["final_deltas", "final_boxes", "final_class_ids", "final_indices"]
        }
    ], "return": ["rpn_anchors", "rpn_deltas", "rpn_class_ids", "rpn_indices", "final_anchors", "final_anchor_indices", "final_deltas", "final_boxes", "final_class_ids", "final_indices"]},
    "FasterRCNN_RPN": {"type": "Sequential", "args": ["features"], "layers": [
        {"type": "GridAnchorGenerator", "ratios": [0.5, 1, 2], "scales": [0.5, 1, 2], "feature_map_scale": 16,
            "in": "features",
            "out": "anchors"
        },
        {"name": "VectorizeAnchors", "type": "VectorizeWithBatchIndices", "permutation": [0, 3, 4, 2, 1],
            "in": "anchors",
            "out": ["rpn_anchors", "rpn_indices"]
        },
        {"name": "VectorizeFeatures", "type": "VectorizeWithBatchIndices",
            "in": "features",
            "out": ["features", "rpn_indices"]
        },
        {"type": "DetectionHead", "num_classes": 2, "num_anchors": 9,
            "in": ["features", "rpn_indices"],
            "out": ["rpn_deltas", "rpn_class_ids", "rpn_indices"]
        },
        {"type": "DeltasToBoxes", "log_deltas": "spec:log_deltas",
            "in": ["rpn_deltas", "rpn_anchors"],
            "out": "rpn_boxes"
        },
        {"type": "FasterRCNN_FilterRPNOutput", "image_size": "spec:image_size",
            "in": ["rpn_boxes", "rpn_class_ids", "rpn_indices"],
            "out": ["proposals", "proposal_scores", "proposal_indices"]
        }
    ], "return": ["rpn_anchors", "rpn_deltas", "rpn_class_ids", "rpn_indices", "proposals", "proposal_indices"]},
    "FasterRCNN_Head": {"type": "Sequential", "args": ["features", "proposals", "proposal_indices"], "layers": [
        {"type": "BoxToRoi", "feature_map_scale": 16, 
            "in": "proposals"
        },
        {"type": "RoiAlign", "output_size": [7, 7], 
            "in": ["features", null, "proposal_indices"]
        },
        {"type": "DetectionHead", "num_classes": "spec:num_classes", "num_anchors": 1,
            "in": [null, "proposal_indices"],
            "out": ["final_deltas", "final_class_ids", "final_indices"]
        },
        {"type": "DeltasToBoxes", "log_deltas": "spec:log_deltas",
            "in": ["final_deltas", "proposals"],
            "out": "final_boxes"
        },
        {"type": "FasterRCNN_FilterFinalOutput", "image_size": "spec:image_size", "disabled": "spec:train",
            "in": ["final_boxes", "final_class_ids", "final_indices"],
            "out": ["final_boxes", "final_class_ids", "final_indices"]
        }
    ], "return": ["final_deltas", "final_boxes", "final_class_ids", "final_indices"]},
    "FasterRCNN_FilterRPNOutput": {"type": "Sequential", "args": ["boxes", "scores", "indices"], "layers": [
        {"type": "ClipBox2DToImage", "image_size": "spec:image_size",
            "in": "boxes",
            "out": "boxes"
        },
        {"type": "FilterSmallBoxes2D", "min_size": [30, 30],
            "in": ["boxes", "scores", "indices"],
            "out": ["boxes", "scores", "indices"]
        },
        {"type": "GatherTopKIndicesOnIndexed", "k": 12000,
            "in": ["scores", "indices", "boxes"],
            "out": ["scores", "indices", "boxes"]
        },
        // NMS
        {"type": "GatherTopKIndicesOnIndexed", "k": 2000,
            "in": ["scores", "indices", "boxes"],
            "out": ["scores", "indices", "boxes"]
        }
    ], "return": ["boxes", "scores", "indices"]},
    "FasterRCNN_FilterFinalOutput": {"type": "Sequential", "args": ["boxes", "scores", "indices"], "layers": [
        {"type": "ClipBox2DToImage", "image_size": "spec:image_size",
            "in": "boxes",
            "out": "boxes"
        },
        {"type": "FilterSmallBoxes2D", "min_size": [30, 30],
            "in": ["boxes", "scores", "indices"],
            "out": ["boxes", "scores", "indices"]
        },
        // score > x
        {"type": "FilterLowScores", "tresh": 0.05,
            "in": ["boxes", "scores", "indices"],
            "out": ["boxes", "scores", "indices"]
        },
        // NMS (per class)
    ], "return": ["boxes", "scores", "indices"]}
}
